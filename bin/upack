#!/bin/bash

# UPack CLI - Intelligent Package and Language Manager
# Modern CLI for post-installation management

VERSION="2.0.0"

# Detect UPack installation location
# Try permanent installation first, then fall back to development
if [[ -d "$HOME/.local/share/upack" ]]; then
    # Permanent installation
    UPACK_ROOT="$HOME/.local/share/upack"
    source "$UPACK_ROOT/environment" 2>/dev/null || true
else
    # Development/temporary installation
    # Resolve real path even if called via symlink
    if [[ -L "${BASH_SOURCE[0]}" ]]; then
        SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
    else
        SCRIPT_PATH="${BASH_SOURCE[0]}"
    fi
    SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
    # Ensure UPACK_ROOT points to the correct directory (bin is inside upack root)
    if [[ "$(basename "$SCRIPT_DIR")" == "bin" ]]; then
        UPACK_ROOT="$(dirname "$SCRIPT_DIR")"
    else
        UPACK_ROOT="$SCRIPT_DIR"
    fi
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
BOLD='\033[1m'
NC='\033[0m'

# Import common functions
if [ -f "$UPACK_ROOT/install/core/common-functions.sh" ]; then
    source "$UPACK_ROOT/install/core/common-functions.sh"
else
    # Fallback functions if common-functions.sh is not available
    show_step() { echo -e "\033[0;34m\033[1m[$(date +'%H:%M:%S')] $1\033[0m"; }
    show_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
    show_error() { echo -e "\033[0;31m❌ $1\033[0m"; }
    show_info() { echo -e "\033[0;33mℹ️  $1\033[0m"; }
    command_exists() { command -v "$1" >/dev/null 2>&1; }
fi

# Show CLI banner
show_cli_banner() {
    echo -e "${CYAN}${BOLD}UPack CLI v$VERSION${NC}"
    echo -e "${WHITE}Intelligent package and language manager${NC}"
    echo ""
}

# Show help
show_help() {
    show_cli_banner
    echo -e "${YELLOW}USAGE:${NC}"
    echo -e "  ${WHITE}upack <command> [options]${NC}"
    echo ""
    echo -e "${YELLOW}LANGUAGES:${NC}"
    echo -e "  ${WHITE}upack install node${NC}        Install Node.js via NVM"
    echo -e "  ${WHITE}upack install python${NC}      Install Python (system + optional pyenv)"
    echo -e "  ${WHITE}upack install rust${NC}        Install Rust via rustup"
    echo -e "  ${WHITE}upack install java${NC}        Install Java via SDKMAN (coming soon)"
    echo -e "  ${WHITE}upack install go${NC}          Install Go via system (coming soon)"
    echo ""
    echo -e "${YELLOW}APPLICATIONS:${NC}"
    echo -e "  ${WHITE}upack install discord${NC}     Install Discord"
    echo -e "  ${WHITE}upack install obs-studio${NC}  Install OBS Studio"
    echo -e "  ${WHITE}upack install docker${NC}      Install Docker (coming soon)"
    echo -e "  ${WHITE}upack install btop${NC}        Install system monitor"
    echo ""
    echo -e "${YELLOW}DEVELOPMENT:${NC}"
    echo -e "  ${WHITE}upack git${NC}                 Configure Git and GitHub SSH"
    echo -e "  ${WHITE}upack git config${NC}          Configure Git user settings only"
    echo -e "  ${WHITE}upack git ssh${NC}             Configure GitHub SSH key only"
    echo ""
    echo -e "${YELLOW}MANAGEMENT:${NC}"
    echo -e "  ${WHITE}upack status${NC}              Show installed packages and languages"
    echo -e "  ${WHITE}upack update${NC}              Update all managed packages"
    echo -e "  ${WHITE}upack list${NC}                List available packages"
    echo ""
    echo -e "${YELLOW}OPTIONS:${NC}"
    echo -e "  ${WHITE}-h, --help${NC}               Show this help message"
    echo -e "  ${WHITE}-v, --version${NC}            Show version information"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  ${WHITE}upack install node python${NC}    Install multiple languages"
    echo -e "  ${WHITE}upack install discord obs${NC}     Install multiple apps"
    echo -e "  ${WHITE}upack git${NC}                     Setup Git and GitHub SSH"
    echo ""
}

# Show version
show_version() {
    show_cli_banner
    echo -e "${WHITE}Version: ${CYAN}$VERSION${NC}"
    echo -e "${WHITE}Repository: ${CYAN}https://github.com/misterioso013/upack${NC}"
    echo ""
}

# Install language
install_language() {
    local language="$1"
    local script_path="$UPACK_ROOT/install/languages/$language.sh"
    
    if [[ -f "$script_path" ]]; then
        show_step "Installing $language..."
        if bash "$script_path"; then
            show_success "$language installation completed"
            return 0
        else
            show_error "$language installation failed"
            return 1
        fi
    else
        show_error "Language '$language' not supported yet"
        show_info "Available languages: node, python, rust"
        return 1
    fi
}

# Install application
install_app() {
    local app="$1"
    local script_path=""
    
    # Map app names to script paths
    case "$app" in
        "discord")
            script_path="$UPACK_ROOT/install/apps/optional/discord.sh"
            ;;
        "obs-studio"|"obs")
            script_path="$UPACK_ROOT/install/apps/optional/obs-studio.sh"
            ;;
        "btop")
            script_path="$UPACK_ROOT/install/apps/optional/btop.sh"
            ;;
        *)
            show_error "Application '$app' not supported yet"
            show_info "Available apps: discord, obs-studio, btop"
            return 1
            ;;
    esac
    
    if [[ -f "$script_path" ]]; then
        show_step "Installing $app..."
        if bash "$script_path"; then
            show_success "$app installation completed"
            return 0
        else
            show_error "$app installation failed"
            return 1
        fi
    else
        show_error "Application script not found: $script_path"
        return 1
    fi
}

# Handle install command
handle_install() {
    local items=("$@")
    
    if [[ ${#items[@]} -eq 0 ]]; then
        show_error "No packages specified"
        show_info "Usage: upack install <package1> [package2] ..."
        return 1
    fi
    
    local languages=("node" "python" "rust" "java" "go")
    local apps=("discord" "obs-studio" "obs" "btop" "docker")
    
    for item in "${items[@]}"; do
        echo ""
        
        # Check if it's a language
        if [[ " ${languages[*]} " =~ " $item " ]]; then
            install_language "$item"
        # Check if it's an application
        elif [[ " ${apps[*]} " =~ " $item " ]]; then
            install_app "$item"
        else
            show_error "Unknown package: $item"
            show_info "Use 'upack list' to see available packages"
        fi
    done
}

# Show status of installed packages
show_status() {
    show_cli_banner
    echo -e "${YELLOW}System Status:${NC}"
    echo ""
    
    # Check Git configuration
    echo -e "${BLUE}Development:${NC}"
    if command_exists git; then
        local git_version=$(git --version 2>/dev/null | cut -d' ' -f3 || echo "unknown")
        local git_name=$(git config --global user.name 2>/dev/null || echo "not set")
        local git_email=$(git config --global user.email 2>/dev/null || echo "not set")
        
        echo -e "  ${GREEN}✅ Git${NC} $git_version"
        
        if [[ "$git_name" != "not set" && "$git_email" != "not set" ]]; then
            echo -e "     ${WHITE}User:${NC} $git_name <$git_email>"
            
            # Check SSH key
            if [[ -f "$HOME/.ssh/id_rsa" ]]; then
                echo -e "     ${GREEN}✅ SSH Key${NC} configured"
            else
                echo -e "     ${YELLOW}⚠️  SSH Key${NC} not found"
            fi
        else
            echo -e "     ${YELLOW}⚠️  Not configured${NC} (run: upack git)"
        fi
    else
        echo -e "  ${RED}❌ Git${NC} not installed"
    fi
    
    echo ""
    
    # Check languages
    echo -e "${BLUE}Languages:${NC}"
    
    # Node.js
    if command_exists node && [ -d "$HOME/.nvm" ]; then
        local node_version=$(node --version 2>/dev/null || echo "unknown")
        echo -e "  ${GREEN}✅ Node.js${NC} $node_version (via NVM)"
    elif command_exists node; then
        local node_version=$(node --version 2>/dev/null || echo "unknown")
        echo -e "  ${YELLOW}⚠️  Node.js${NC} $node_version (system)"
    else
        echo -e "  ${RED}❌ Node.js${NC} not installed"
    fi
    
    # Python
    if command_exists python3; then
        local python_version=$(python3 --version 2>/dev/null | cut -d' ' -f2 || echo "unknown")
        if command_exists pyenv; then
            echo -e "  ${GREEN}✅ Python${NC} $python_version (with pyenv)"
        else
            echo -e "  ${GREEN}✅ Python${NC} $python_version (system)"
        fi
    else
        echo -e "  ${RED}❌ Python${NC} not installed"
    fi
    
    # Rust
    if command_exists rustc; then
        local rust_version=$(rustc --version 2>/dev/null | cut -d' ' -f2 || echo "unknown")
        echo -e "  ${GREEN}✅ Rust${NC} $rust_version (via rustup)"
    else
        echo -e "  ${RED}❌ Rust${NC} not installed"
    fi
    
    echo ""
    
    # Check applications
    echo -e "${BLUE}Applications:${NC}"
    
    # Discord
    if command_exists discord; then
        echo -e "  ${GREEN}✅ Discord${NC}"
    else
        echo -e "  ${RED}❌ Discord${NC} not installed"
    fi
    
    # OBS Studio
    if command_exists obs; then
        echo -e "  ${GREEN}✅ OBS Studio${NC}"
    else
        echo -e "  ${RED}❌ OBS Studio${NC} not installed"
    fi
    
    # btop
    if command_exists btop; then
        echo -e "  ${GREEN}✅ btop${NC}"
    elif command_exists htop; then
        echo -e "  ${YELLOW}⚠️  htop${NC} (btop alternative)"
    else
        echo -e "  ${RED}❌ System Monitor${NC} not installed"
    fi
    
    echo ""
}

# List available packages
list_packages() {
    show_cli_banner
    echo -e "${YELLOW}Available Packages:${NC}"
    echo ""
    
    echo -e "${BLUE}Languages:${NC}"
    echo -e "  ${WHITE}node${NC}        - Node.js via NVM"
    echo -e "  ${WHITE}python${NC}      - Python (system + optional pyenv)"
    echo -e "  ${WHITE}rust${NC}        - Rust via rustup"
    echo -e "  ${CYAN}java${NC}        - Java via SDKMAN (coming soon)"
    echo -e "  ${CYAN}go${NC}          - Go via system (coming soon)"
    echo ""
    
    echo -e "${BLUE}Applications:${NC}"
    echo -e "  ${WHITE}discord${NC}     - Discord messaging app"
    echo -e "  ${WHITE}obs-studio${NC}  - OBS Studio for streaming"
    echo -e "  ${WHITE}btop${NC}        - Modern system monitor"
    echo -e "  ${CYAN}docker${NC}      - Docker containers (coming soon)"
    echo ""
    
    echo -e "${CYAN}Usage: ${WHITE}upack install <package>${NC}"
    echo ""
}

# Update managed packages
update_packages() {
    show_cli_banner
    echo -e "${YELLOW}Updating managed packages...${NC}"
    echo ""
    
    # Update Node.js via NVM
    if command_exists nvm && [ -d "$HOME/.nvm" ]; then
        show_step "Updating Node.js..."
        # Source NVM
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts --reinstall-packages-from=current
        show_success "Node.js updated"
    fi
    
    # Update Rust via rustup
    if command_exists rustup; then
        show_step "Updating Rust..."
        rustup update
        show_success "Rust updated"
    fi
    
    # Update system packages
    show_step "Updating system packages..."
    sudo apt update && sudo apt upgrade -y
    show_success "System packages updated"
    
    echo ""
    show_success "All packages updated successfully"
}

# Ensure gum is installed
ensure_gum() {
    if ! command_exists gum; then
        show_step "Installing gum (CLI interaction tool)..."
        if bash "$UPACK_ROOT/utils/gum.sh"; then
            show_success "gum installed successfully"
        else
            show_error "Failed to install gum"
            return 1
        fi
    fi
}

# Configure Git settings
configure_git() {
    show_cli_banner
    echo -e "${YELLOW}🔧 Git Configuration${NC}"
    echo ""
    
    # Ensure gum is available
    ensure_gum || return 1
    
    # Run Git configuration script
    if [[ -f "$UPACK_ROOT/utils/git.sh" ]]; then
        bash "$UPACK_ROOT/utils/git.sh"
    else
        show_error "Git configuration script not found"
        return 1
    fi
}

# Configure GitHub SSH
configure_github_ssh() {
    show_cli_banner
    echo -e "${YELLOW}🔐 GitHub SSH Configuration${NC}"
    echo ""
    
    # Ensure gum is available
    ensure_gum || return 1
    
    # Run GitHub SSH configuration script
    if [[ -f "$UPACK_ROOT/config/github/ssh-config.sh" ]]; then
        bash "$UPACK_ROOT/config/github/ssh-config.sh"
    else
        show_error "GitHub SSH configuration script not found"
        return 1
    fi
}

# Handle git command
handle_git() {
    local subcommand="${1:-}"
    
    case "$subcommand" in
        "config")
            configure_git
            ;;
        "ssh")
            configure_github_ssh
            ;;
        "")
            # Full Git setup - both config and SSH
            show_cli_banner
            echo -e "${YELLOW}🚀 Complete Git & GitHub Setup${NC}"
            echo ""
            
            show_step "Step 1: Configuring Git user settings..."
            configure_git || return 1
            
            echo ""
            show_step "Step 2: Setting up GitHub SSH key..."
            configure_github_ssh || return 1
            
            echo ""
            show_success "🎉 Git and GitHub are fully configured!"
            echo -e "${CYAN}You can now use Git with GitHub via SSH authentication${NC}"
            ;;
        *)
            show_error "Unknown git subcommand: $subcommand"
            echo -e "${WHITE}Available commands:${NC}"
            echo -e "  ${CYAN}upack git${NC}        - Complete Git and GitHub setup"
            echo -e "  ${CYAN}upack git config${NC} - Configure Git user settings only"
            echo -e "  ${CYAN}upack git ssh${NC}    - Configure GitHub SSH key only"
            return 1
            ;;
    esac
}

# Main function
main() {
    case "${1:-}" in
        "install")
            shift
            handle_install "$@"
            ;;
        "git")
            shift
            handle_git "$@"
            ;;
        "status")
            show_status
            ;;
        "list")
            list_packages
            ;;
        "update")
            update_packages
            ;;
        "-h"|"--help"|"help")
            show_help
            ;;
        "-v"|"--version"|"version")
            show_version
            ;;
        "")
            show_help
            ;;
        *)
            show_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
