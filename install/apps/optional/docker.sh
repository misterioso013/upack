#!/bin/bash

# Docker Desktop installation script for Ubuntu
# Based on: https://docs.docker.com/desktop/setup/install/linux/ubuntu/

echo "üê≥ Installing Docker Desktop..."

# Check if Docker Desktop is already installed
if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
    echo "‚úîÔ∏è Docker Desktop is already installed. Checking version..."
    docker --version
    docker-compose --version
    echo "‚úÖ Docker Desktop installation verified."
    return 0 2>/dev/null || exit 0
fi

# Update package index
echo "üì¶ Updating package index..."
sudo apt-get update

# Install prerequisites
echo "üîß Installing prerequisites..."
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

# Add Docker's official GPG key
echo "üîë Adding Docker's official GPG key..."
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add Docker repository
echo "üìã Adding Docker repository..."
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package index again
echo "üì¶ Updating package index with Docker repository..."
sudo apt-get update

# Install Docker Engine, CLI, containerd, and Docker Compose
echo "üê≥ Installing Docker Engine and Docker Compose..."
sudo apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin

# Download and install Docker Desktop
echo "üñ•Ô∏è Installing Docker Desktop..."
ARCH=$(dpkg --print-architecture)
if [[ "$ARCH" == "amd64" ]]; then
    DOCKER_DESKTOP_URL="https://desktop.docker.com/linux/main/amd64/docker-desktop-amd64.deb"
elif [[ "$ARCH" == "arm64" ]]; then
    DOCKER_DESKTOP_URL="https://desktop.docker.com/linux/main/arm64/docker-desktop-arm64.deb"
else
    echo "‚ùå Unsupported architecture: $ARCH"
    echo "   Docker Desktop supports amd64 and arm64 only"
    return 1 2>/dev/null || exit 1
fi

# Download Docker Desktop
echo "‚¨áÔ∏è Downloading Docker Desktop for $ARCH..."
cd /tmp
if wget -O docker-desktop.deb "$DOCKER_DESKTOP_URL"; then
    echo "‚úÖ Docker Desktop downloaded successfully"
else
    echo "‚ùå Failed to download Docker Desktop"
    return 1 2>/dev/null || exit 1
fi

# Install Docker Desktop
echo "üì¶ Installing Docker Desktop package..."
if sudo apt install -y ./docker-desktop.deb; then
    echo "‚úÖ Docker Desktop installed successfully"
else
    echo "‚ùå Failed to install Docker Desktop"
    return 1 2>/dev/null || exit 1
fi

# Clean up
rm -f docker-desktop.deb

# Add current user to docker group
echo "üë§ Adding current user to docker group..."
sudo usermod -aG docker $USER

# Enable and start Docker service
echo "üöÄ Enabling and starting Docker service..."
sudo systemctl enable docker.service
sudo systemctl enable containerd.service
sudo systemctl start docker.service
sudo systemctl start containerd.service

echo ""
echo "‚úÖ Docker Desktop installation completed!"
echo ""
echo "üìã What was installed:"
echo "   ‚Ä¢ Docker Engine"
echo "   ‚Ä¢ Docker CLI"
echo "   ‚Ä¢ Docker Compose"
echo "   ‚Ä¢ Docker Desktop GUI"
echo "   ‚Ä¢ Containerd runtime"
echo ""
echo "üîÑ Important: You need to log out and log back in (or restart)"
echo "   for the group changes to take effect."
echo ""
echo "üöÄ After relogging, you can:"
echo "   ‚Ä¢ Start Docker Desktop from Applications menu"
echo "   ‚Ä¢ Use 'docker run hello-world' to test"
echo "   ‚Ä¢ Use 'docker-compose' for multi-container apps"
echo ""

# Test Docker installation (might fail if user needs to relog)
echo "üß™ Testing Docker installation..."
if docker --version &> /dev/null; then
    echo "‚úÖ Docker CLI is working"
    docker --version
else
    echo "‚ö†Ô∏è Docker CLI test failed (you may need to relog)"
fi

if docker-compose --version &> /dev/null; then
    echo "‚úÖ Docker Compose is working"
    docker-compose --version
else
    echo "‚ö†Ô∏è Docker Compose test failed (you may need to relog)"
fi

echo "‚úÖ Docker installation script completed."