#!/bin/bash

# UPack CLI - Intelligent Package and Language Manager
# Modern CLI for post-installation management

VERSION="2.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UPACK_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
BOLD='\033[1m'
NC='\033[0m'

# Import common functions
source "$UPACK_ROOT/install/core/common-functions.sh"

# Show CLI banner
show_cli_banner() {
    echo -e "${CYAN}${BOLD}UPack CLI v$VERSION${NC}"
    echo -e "${WHITE}Intelligent package and language manager${NC}"
    echo ""
}

# Show help
show_help() {
    show_cli_banner
    echo -e "${YELLOW}USAGE:${NC}"
    echo -e "  ${WHITE}upack <command> [options]${NC}"
    echo ""
    echo -e "${YELLOW}LANGUAGES:${NC}"
    echo -e "  ${WHITE}upack install node${NC}        Install Node.js via NVM"
    echo -e "  ${WHITE}upack install python${NC}      Install Python (system + optional pyenv)"
    echo -e "  ${WHITE}upack install rust${NC}        Install Rust via rustup"
    echo -e "  ${WHITE}upack install java${NC}        Install Java via SDKMAN (coming soon)"
    echo -e "  ${WHITE}upack install go${NC}          Install Go via system (coming soon)"
    echo ""
    echo -e "${YELLOW}APPLICATIONS:${NC}"
    echo -e "  ${WHITE}upack install discord${NC}     Install Discord"
    echo -e "  ${WHITE}upack install obs-studio${NC}  Install OBS Studio"
    echo -e "  ${WHITE}upack install docker${NC}      Install Docker (coming soon)"
    echo -e "  ${WHITE}upack install btop${NC}        Install system monitor"
    echo -e "  ${WHITE}upack install typora${NC}      Install Typora (Markdown editor)"
    echo ""
    echo -e "${YELLOW}MANAGEMENT:${NC}"
    echo -e "  ${WHITE}upack status${NC}              Show installed packages and languages"
    echo -e "  ${WHITE}upack update${NC}              Update UPack and all managed packages"
    echo -e "  ${WHITE}upack list${NC}                List available packages"
    echo ""
    echo -e "${YELLOW}OPTIONS:${NC}"
    echo -e "  ${WHITE}-h, --help${NC}               Show this help message"
    echo -e "  ${WHITE}-v, --version${NC}            Show version information"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  ${WHITE}upack install node python${NC}    Install multiple languages"
    echo -e "  ${WHITE}upack install discord obs${NC}     Install multiple apps"
    echo ""
}

# Show version
show_version() {
    show_cli_banner
    echo -e "${WHITE}Version: ${CYAN}$VERSION${NC}"
    echo -e "${WHITE}Repository: ${CYAN}https://github.com/misterioso013/upack${NC}"
    echo ""
}

# Install language
install_language() {
    local language="$1"
    local script_path="$UPACK_ROOT/install/languages/$language.sh"
    
    if [[ -f "$script_path" ]]; then
        show_step "Installing $language..."
        if bash "$script_path"; then
            show_success "$language installation completed"
            return 0
        else
            show_error "$language installation failed"
            return 1
        fi
    else
        show_error "Language '$language' not supported yet"
        show_info "Available languages: node, python, rust"
        return 1
    fi
}

# Install application
install_app() {
    local app="$1"
    local script_path=""
    
    # Map app names to script paths
    case "$app" in
        "discord")
            script_path="$UPACK_ROOT/install/apps/optional/discord.sh"
            ;;
        "obs-studio"|"obs")
            script_path="$UPACK_ROOT/install/apps/optional/obs-studio.sh"
            ;;
        "btop")
            script_path="$UPACK_ROOT/install/apps/optional/btop.sh"
            ;;
        "typora")
            script_path="$UPACK_ROOT/install/apps/optional/typora.sh"
            ;;
        "tlauncher")
            script_path="$UPACK_ROOT/install/apps/optional/tlauncher.sh"
            ;;
        "dev-tools")
            script_path="$UPACK_ROOT/install/apps/optional/dev-tools.sh"
            ;;
        "terminal-config")
            script_path="$UPACK_ROOT/install/apps/optional/terminal-config.sh"
            ;;
        *)
            show_error "Application '$app' not supported yet"
            show_info "Available apps: discord, obs-studio, btop, typora, tlauncher, dev-tools, terminal-config"
            return 1
            ;;
    esac
    
    if [[ -f "$script_path" ]]; then
        show_step "Installing $app..."
        if bash "$script_path"; then
            show_success "$app installation completed"
            return 0
        else
            show_error "$app installation failed"
            return 1
        fi
    else
        show_error "Application script not found: $script_path"
        return 1
    fi
}

# Handle install command
handle_install() {
    local items=("$@")
    
    if [[ ${#items[@]} -eq 0 ]]; then
        show_error "No packages specified"
        show_info "Usage: upack install <package1> [package2] ..."
        return 1
    fi
    
    local languages=("node" "python" "rust" "java" "go")
    local apps=("discord" "obs-studio" "obs" "btop" "docker" "typora" "tlauncher" "dev-tools" "terminal-config")
    
    for item in "${items[@]}"; do
        echo ""
        
        # Check if it's a language
        if [[ " ${languages[*]} " =~ " $item " ]]; then
            install_language "$item"
        # Check if it's an application
        elif [[ " ${apps[*]} " =~ " $item " ]]; then
            install_app "$item"
        else
            show_error "Unknown package: $item"
            show_info "Use 'upack list' to see available packages"
        fi
    done
}

# Show status of installed packages
show_status() {
    show_cli_banner
    echo -e "${YELLOW}System Status:${NC}"
    echo ""
    
    # Check languages
    echo -e "${BLUE}Languages:${NC}"
    
    # Node.js
    if command_exists node && [ -d "$HOME/.nvm" ]; then
        local node_version=$(node --version 2>/dev/null || echo "unknown")
        echo -e "  ${GREEN}‚úÖ Node.js${NC} $node_version (via NVM)"
    elif command_exists node; then
        local node_version=$(node --version 2>/dev/null || echo "unknown")
        echo -e "  ${YELLOW}‚ö†Ô∏è  Node.js${NC} $node_version (system)"
    else
        echo -e "  ${RED}‚ùå Node.js${NC} not installed"
    fi
    
    # Python
    if command_exists python3; then
        local python_version=$(python3 --version 2>/dev/null | cut -d' ' -f2 || echo "unknown")
        if command_exists pyenv; then
            echo -e "  ${GREEN}‚úÖ Python${NC} $python_version (with pyenv)"
        else
            echo -e "  ${GREEN}‚úÖ Python${NC} $python_version (system)"
        fi
    else
        echo -e "  ${RED}‚ùå Python${NC} not installed"
    fi
    
    # Rust
    if command_exists rustc; then
        local rust_version=$(rustc --version 2>/dev/null | cut -d' ' -f2 || echo "unknown")
        echo -e "  ${GREEN}‚úÖ Rust${NC} $rust_version (via rustup)"
    else
        echo -e "  ${RED}‚ùå Rust${NC} not installed"
    fi
    
    echo ""
    
    # Check applications
    echo -e "${BLUE}Applications:${NC}"
    
    # Discord
    if command_exists discord; then
        echo -e "  ${GREEN}‚úÖ Discord${NC}"
    else
        echo -e "  ${RED}‚ùå Discord${NC} not installed"
    fi
    
    # OBS Studio
    if command_exists obs; then
        echo -e "  ${GREEN}‚úÖ OBS Studio${NC}"
    else
        echo -e "  ${RED}‚ùå OBS Studio${NC} not installed"
    fi
    
    # btop
    if command_exists btop; then
        echo -e "  ${GREEN}‚úÖ btop${NC}"
    elif command_exists htop; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  htop${NC} (btop alternative)"
    else
        echo -e "  ${RED}‚ùå System Monitor${NC} not installed"
    fi
    
    echo ""
}

# List available packages
list_packages() {
    show_cli_banner
    echo -e "${YELLOW}Available Packages:${NC}"
    echo ""
    
    echo -e "${BLUE}Languages:${NC}"
    echo -e "  ${WHITE}node${NC}        - Node.js via NVM"
    echo -e "  ${WHITE}python${NC}      - Python (system + optional pyenv)"
    echo -e "  ${WHITE}rust${NC}        - Rust via rustup"
    echo -e "  ${CYAN}java${NC}        - Java via SDKMAN (coming soon)"
    echo -e "  ${CYAN}go${NC}          - Go via system (coming soon)"
    echo ""
    
    echo -e "${BLUE}Applications:${NC}"
    echo -e "  ${WHITE}discord${NC}     - Discord messaging app"
    echo -e "  ${WHITE}obs-studio${NC}  - OBS Studio for streaming"
    echo -e "  ${WHITE}btop${NC}        - Modern system monitor"
    echo -e "  ${WHITE}typora${NC}      - Typora Markdown editor"
    echo -e "  ${WHITE}tlauncher${NC}   - TLauncher Minecraft launcher"
    echo -e "  ${WHITE}dev-tools${NC}   - Development tools collection"
    echo -e "  ${WHITE}terminal-config${NC} - Advanced terminal configuration"
    echo -e "  ${CYAN}docker${NC}      - Docker containers (coming soon)"
    echo ""
    
    echo -e "${CYAN}Usage: ${WHITE}upack install <package>${NC}"
    echo ""
}

# Update managed packages
update_packages() {
    show_cli_banner
    echo -e "${YELLOW}Updating managed packages...${NC}"
    echo ""
    
    # Update UPack itself if it's a git repository
    if [[ -d "$UPACK_ROOT/.git" ]]; then
        show_step "Updating UPack..."
        
        # Fetch latest changes first
        if (cd "$UPACK_ROOT" && git fetch origin main 2>/dev/null); then
            # Check if updates are available
            LOCAL_COMMIT=$(cd "$UPACK_ROOT" && git rev-parse HEAD 2>/dev/null)
            REMOTE_COMMIT=$(cd "$UPACK_ROOT" && git rev-parse origin/main 2>/dev/null)
            
            if [[ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]]; then
                echo "   üì¶ Updates available, pulling latest version..."
                if (cd "$UPACK_ROOT" && git pull origin main 2>/dev/null); then
                    show_success "UPack updated to latest version"
                    
                    # If this is a permanent installation, update the global CLI
                    if [[ "$UPACK_ROOT" == "$HOME/.local/share/upack" ]]; then
                        show_step "Updating global UPack CLI..."
                        if [[ -f "$UPACK_ROOT/bin/upack" ]]; then
                            cp "$UPACK_ROOT/bin/upack" "$HOME/.local/bin/upack" 2>/dev/null || true
                            show_success "Global CLI updated"
                        fi
                    fi
                else
                    show_error "Failed to pull UPack updates"
                fi
            else
                show_success "UPack is already up to date"
            fi
        else
            show_error "Failed to fetch UPack updates (no internet connection?)"
        fi
        echo ""
    elif [[ -d "$HOME/.local/share/upack" ]]; then
        show_step "Checking UPack installation..."
        echo "   ‚ö†Ô∏è  UPack is installed but not as a git repository"
        
        # Check if we're running from a development git repo
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        DEV_ROOT="$SCRIPT_DIR"
        
        if [[ -d "$DEV_ROOT/.git" ]] && [[ "$DEV_ROOT" != "$HOME/.local/share/upack" ]]; then
            echo "   üí° Detected development git repository at: $DEV_ROOT"
            echo -e "   üîÑ To enable auto-updates, you can:"
            echo -e "   ${CYAN}1. Run setup from git directory: cd $DEV_ROOT && ./setup.sh${NC}"
            echo -e "   ${CYAN}2. Or manually clone: git clone https://github.com/misterioso013/upack.git && cd upack && ./setup.sh${NC}"
        else
            echo -e "   üîÑ To enable auto-updates, reinstall with:"
            echo -e "   ${CYAN}git clone https://github.com/misterioso013/upack.git && cd upack && ./setup.sh${NC}"
        fi
        echo ""
    fi
    
    # Update Node.js via NVM
    if command_exists nvm && [ -d "$HOME/.nvm" ]; then
        show_step "Updating Node.js..."
        # Source NVM
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts --reinstall-packages-from=current
        show_success "Node.js updated"
    fi
    
    # Update Rust via rustup
    if command_exists rustup; then
        show_step "Updating Rust..."
        rustup update
        show_success "Rust updated"
    fi
    
    # Update system packages
    show_step "Updating system packages..."
    sudo apt update && sudo apt upgrade -y
    show_success "System packages updated"
    
    echo ""
    show_success "All packages updated successfully"
}

# Main function
main() {
    case "${1:-}" in
        "install")
            shift
            handle_install "$@"
            ;;
        "status")
            show_status
            ;;
        "list")
            list_packages
            ;;
        "update")
            update_packages
            ;;
        "-h"|"--help"|"help")
            show_help
            ;;
        "-v"|"--version"|"version")
            show_version
            ;;
        "")
            show_help
            ;;
        *)
            show_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
